{"version":3,"sources":["services/phonebook.js","App.js","index.js"],"names":["baseUrl","console","log","axios","get","then","response","data","newPerson","post","id","deleteUrl","delete","deleteObject","updateUrl","put","PeopleList","listOfPeople","deleteSelectedPerson","map","person","name","number","deleteButton","Form","addNewPerson","setCurrentName","setCurrentNumber","newName","newNumber","onSubmit","value","onChange","type","Filter","newFilter","setCurrentFilter","Person","class","onClick","Notification","message","className","App","useState","persons","setPersons","setName","setNumber","setFilter","filteredList","setFilteredList","errorMessage","setErroMessage","useEffect","phonebookServices","resultPersons","showErrorMessage","setTimeout","event","filterRetrieved","target","listHasFilter","filter","includes","preventDefault","found","find","element","window","confirm","concat","putResponse","catch","error","result","deleteResponse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55add276.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = \"/api/people\"\n\n//returns all people in the phonebook\nconst getAll = () => {\n    console.log(\"inside get All\")\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newPerson) => {\n\n    const request = axios.post(baseUrl,newPerson)\n    return request.then(response => response.data)\n\n}\n\nconst deletePerson = (id) => {\n\n    const deleteUrl = baseUrl+`/${id}`\n    const request = axios.delete(deleteUrl)\n    return request.then(deleteObject => deleteObject.data)\n\n}\n\nconst updatePerson = (newPerson) => {\n\n    const updateUrl = baseUrl+`/${newPerson.id}`\n    const request = axios.put(updateUrl,newPerson)\n    return request.then(response=>response.data)\n\n}\n\nexport default {getAll,create,deletePerson,updatePerson}","import React, { useState, useEffect } from 'react'\nimport phonebook from './services/phonebook'\nimport phonebookServices from './services/phonebook'\n\n\nfunction App() {\n\n    //setting all states that need to be monitored and retrieveds\n    const [persons,setPersons] = useState([])\n\n    const [newName,setName] = useState('')\n\n    const [newNumber,setNumber] = useState('')\n  \n    const [newFilter,setFilter] = useState('')\n\n    const [filteredList,setFilteredList] = useState([])\n\n    const [errorMessage,setErroMessage]=useState(null)\n\n    //queries the json server if there is a valid response\n    //prints promise fulfilled and changes the persons state\n    //to the data returned in the response object.\n    console.log(\"hello\")\n\n    useEffect(() => {\n      console.log(\"inside use effect\")\n      phonebookServices.getAll()\n        .then(resultPersons => {\n          console.log(\"promise fulfilled\")\n          setPersons(resultPersons)\n        })\n    },[])\n\n    //sets the currentName state from the name input box\n    const setCurrentName = (event) => {\n      console.log(\"name is:\",event.target.value)\n      setName(event.target.value)\n    }\n\n    //sets the currentNumber state retrieved from the number input box\n    const setCurrentNumber = (event) => {\n      setNumber(event.target.value)\n    }\n\n    const showErrorMessage = (message) => {\n      console.log(\"show error message inside\")\n      setErroMessage(message)\n      setTimeout(() => {\n        setErroMessage(null)\n      },5000)\n    }\n\n    const deleteSelectedPerson = (person) => {\n      const id = person.id\n      const result = window.confirm(`Delete ${person.name}?`)\n      console.log(\"inside delete selected\")\n      console.log(\"id is:\", id)\n      if(result)\n      {      \n        phonebookServices.deletePerson(id).then(deleteResponse => {console.log(deleteResponse)})\n        setName('')\n        setNumber('')\n      }   \n\n    }\n    \n    //adds a new person to the phosne book if their name isn't already included\n    //an alert is given to the user if the name is a copy\n    const addNewPerson = (event) => {\n      event.preventDefault()\n      const found = persons.find(element => element.name === newName)\n      console.log(\"match found\" , found)\n      var newPerson = {...found,number:newNumber}\n\n      if(!found){\n        console.log(persons)\n        setPersons(persons.concat(newPerson))\n        phonebookServices.create(newPerson).then(putResponse => {\n          console.log(putResponse)\n          showErrorMessage(\"person has been successfully added\")\n        }).catch(error => {\n          showErrorMessage(\"an error has occured in adding new person\")\n        })\n\n        setNumber('')\n        setName('')\n      }else{\n        const result = window.confirm(`add a new number to this existing contact?`)\n        if(result){\n          phonebookServices.updatePerson(newPerson)\n        }\n        setName('')\n        setNumber('')\n      }\n\n    }\n    \n    \n    //sets the filter used to present the user with people in the phonebook\n    //matching the input in the filter input box\n    const setCurrentFilter = (event) => {\n      \n      const filterRetrieved = event.target.value\n      const listHasFilter = persons.filter((person)=>person.name.includes(newFilter))\n      console.log(\"new filter is: \", filterRetrieved)\n      console.log(\"new filteredList is:\" ,listHasFilter )\n      setFilter(filterRetrieved)\n      setFilteredList(listHasFilter)\n      \n    }\n\n  \n\n    // const filtered = filterList()\n    \n    return (\n      <div>\n        <Notification message={errorMessage} />\n        <h2>Phonebook</h2>\n          <Filter newFilter={newFilter} setCurrentFilter={setCurrentFilter}/>\n          \n        <h2>add a new contact! </h2>\n          <Form addNewPerson={addNewPerson} setCurrentName={setCurrentName} setCurrentNumber={setCurrentNumber} newName={newName} newNumber={newNumber}/>\n        \n        <h2>Numbers</h2>\n          <PeopleList listOfPeople={filteredList} deleteSelectedPerson = {deleteSelectedPerson}/>\n      </div>\n    )\n  \n}\n\n\n//components to show a list of People in the phone book matching the current filter\nconst PeopleList = ({listOfPeople,deleteSelectedPerson}) => {\n  \n  console.log(listOfPeople)\n\n  return (\n    <ul>\n      {\n      listOfPeople.map((person)=>\n        <Person key={person.id} name={person.name} number={person.number} id={person.id} deleteButton={() => deleteSelectedPerson(person)} />\n      )}\n    </ul>\n  );\n}\n\n\n//form component for adding new phone contacts\nconst Form = ({addNewPerson,setCurrentName,setCurrentNumber,newName,newNumber}) => {\n  return(\n    <form onSubmit={addNewPerson}>\n\n    <div>\n      Name:<input value={newName} onChange={setCurrentName}/>\n    </div>\n\n    <div>\n      Number:<input value={newNumber} onChange={setCurrentNumber}></input>\n    </div>\n\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n\n  </form>\n  );\n}\n\n\n//filter component that handles the filter state which determines which\n//numbers are output on the screen from the phonebook\nconst Filter = ({newFilter,setCurrentFilter}) => {\n  return(\n    <div>\n            filter: <input value={newFilter} onChange={setCurrentFilter} />\n    </div>\n  );\n}\n\n\n//A person component to control how the contents of the person object \n//is presented to the user\nconst Person = ({number,name,id,deleteButton}) => {\n  console.log(number)\n  return (\n    <div>\n      <li class=\"note\">{name} : {number} : {id}</li> <button onClick={deleteButton}>delete</button>\n    </div>\n  );\n}\n\nconst Notification = ({message}) => {\n\n  if(message===null){\n    return null\n  }\n\n  return(\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\n\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}